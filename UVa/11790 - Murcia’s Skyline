#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>

using namespace std;

int T, N, temp, result, case_num = 0;
vector<int> A, LI, LD, width, LD_width, LI_width;

int LIS(int index)
{
  if(index == 0)
  {
    LI[index] = 1;
    LI_width[index] = width[index];
    return width[index];
  }
  LI[index] = 1;
  LI_width[index] = width[index];
  for(int i = 0; i < index; i++)
    if(A[i] < A[index] && (LI_width[index] < LI_width[i] + width[index]))
    {
      LI[index] = LI[i] + 1;
      LI_width[index] = LI_width[i] + width[index];
    }
  return LI_width[index];
}

int LDS(int index)
{
  if(index == 0)
  {
    LD[index] = 1;
    LD_width[index] = width[index];
    return width[index];
  }
  LD[index] = 1;
  LD_width[index] = width[index];
  for(int i = 0; i < index; i++)
    if(A[i] > A[index] && (LD_width[index] < LD_width[i] + width[index]))
    {
      LD[index] = LD[i] + 1;
      LD_width[index] = LD_width[i] + width[index];
    }
  return LD_width[index];
}

int main()
{
  scanf("%d", &T);
  while(T--)
  {
    A.clear();
    LD.clear();
    LI.clear();
    width.clear();
    LD_width.clear();
    LI_width.clear();
    scanf("%d", &N);

    LD.resize(N);
    LI.resize(N);
    LD_width.resize(N);
    LI_width.resize(N);
    for(int i = 0; i < N; i++)
    {
      scanf("%d", &temp);
      A.push_back(temp);
    }
    for(int i = 0; i < N; i++)
    {
      scanf("%d", &temp);
      width.push_back(temp);
    }
    int max_LIS = 0; int max_LDS = 0; int max_LIS_width_index = 0; int max_LDS_width_index = 0;
    for(int i = 0; i < N; i++)
    {
      int t1 = LIS(i);
      int t2 = LDS(i);
      if(t1 > max_LIS || (t1 == max_LIS && LI_width[i] > LI_width[max_LIS_width_index]))
      {
        max_LIS = t1;
        max_LIS_width_index = i;
      }
      if(t2 > max_LDS || (t2 == max_LDS && LD_width[i] > LD_width[max_LDS_width_index]))
      {
        max_LDS = t2;
        max_LDS_width_index = i;
      }
    }

    if(max_LIS >= max_LDS)
      printf("Case %d. Increasing (%d). Decreasing (%d).\n", ++case_num, LI_width[max_LIS_width_index], LD_width[max_LDS_width_index]);

    else
      printf("Case %d. Decreasing (%d). Increasing (%d).\n", ++case_num, LD_width[max_LDS_width_index], LI_width[max_LIS_width_index]);

  }
}
